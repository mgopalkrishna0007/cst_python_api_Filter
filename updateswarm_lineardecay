    def _update_swarm(self):
        n_particles = self.options['SwarmSize']
        c1 = self.options['SelfAdjustment']
        c2 = self.options['SocialAdjustment']
        
        # Calculate linear decay from initial to final inertia over iterations
        max_iter = self.options['MaxIterations']
        progress = min(self.state['iteration'] / max_iter, 1.0)  # 0 to 1
        target_inertia = (self.options['InitialInertia'] - 
                        (self.options['InitialInertia'] - self.options['FinalInertia']) * progress)
        
        # Always update inertia with linear decay
        self.state['inertia'] = np.clip(
            target_inertia,
            self.options['FinalInertia'],
            self.options['InitialInertia']
        )
        
        # Rest of the existing method remains the same
        neighbors = np.zeros((n_particles, self.state['neighborhood_size']), dtype=int)
        for i in range(n_particles):
            neighbors[i] = np.arange(i, i + self.state['neighborhood_size']) % n_particles
            
        neighbor_bests = self.best_positions[neighbors]
        neighbor_fvals = self.best_fvals[neighbors]
        best_neighbor_idx = np.argmin(neighbor_fvals, axis=1)
        best_neighbors = neighbor_bests[np.arange(n_particles), best_neighbor_idx]
        
        r1 = np.random.rand(n_particles, self.nvars)
        r2 = np.random.rand(n_particles, self.nvars)
        cognitive = c1 * r1 * (self.best_positions - self.positions)
        social = c2 * r2 * (best_neighbors - self.positions)
        self.velocities = self.state['inertia'] * self.velocities + cognitive + social
        
        new_positions = self.positions + self.velocities
        new_positions = np.clip(new_positions, self.lb, self.ub)
        
        out_of_bounds = np.logical_or(
            new_positions <= self.lb,
            new_positions >= self.ub
        )
        self.velocities[out_of_bounds] = 0
        
        self.positions = new_positions
