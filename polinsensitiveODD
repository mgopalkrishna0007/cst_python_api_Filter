import numpy as np
import matplotlib.pyplot as plt

def generate_1_8th_shape(m):
    if m % 2 == 0:
        raise ValueError("Matrix size must be odd.")
    c = m // 2
    shape = np.zeros((m, m), dtype=int)

    # Fill 1/8th triangle including the center row and column
    for i in range(c + 1):  # include center
        for j in range(i, c + 1):
            shape[i, j] = np.random.randint(0, 2)
    return shape

def mirror_8_fold(base):
    m = base.shape[0]
    c = m // 2
    matrix = np.zeros_like(base)

    # Mirror the values across 8 symmetric directions
    for i in range(c + 1):  # include center
        for j in range(i, c + 1):
            val = base[i, j]

            # 8 symmetric positions
            coords = [
                (i, j), (j, i),
                (i, m - 1 - j), (j, m - 1 - i),
                (m - 1 - i, j), (m - 1 - j, i),
                (m - 1 - i, m - 1 - j), (m - 1 - j, m - 1 - i)
            ]

            for x, y in coords:
                matrix[x, y] = val

    return matrix

# Parameters
grid_size = 21  # must be odd

# Generate and mirror
shape_1_8 = generate_1_8th_shape(grid_size)
full_shape = mirror_8_fold(shape_1_8)

# Plot
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

axs[0].imshow(shape_1_8, cmap='Reds', vmin=0.01)
axs[0].set_title('Random 1/8th Region (Upper-Left Triangle)')
axs[0].axis('off')

axs[1].imshow(full_shape, cmap='Reds', vmin=0.01)
axs[1].set_title('Full 8-Fold Symmetric Pattern')
axs[1].axis('off')

plt.tight_layout()
plt.show()
