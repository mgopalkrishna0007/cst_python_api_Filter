# import json

# # Load the JSON file
# with open(r"C:\Users\GOPAL\Downloads\cst_batch_results_20250613_153723_converted.json", 'r') as f:
#     data = json.load(f)

# print(type(data))  # Example output: <class 'list'> or <class 'dict'>
# print(data.keys())           # Top-level keys
# print(type(data['some_key']))  # Type of value for a given key


# import json

# # Load file
# with open(r"C:\Users\GOPAL\Downloads\cst_batch_results_20250613_153723_converted.json", "r") as f:
#     data = json.load(f)

# # Top level
# print("Top level keys:", data.keys())

# # Simulations
# simulations = data["simulations"]
# print("Number of simulations:", len(simulations))

# # One simulation
# sim0 = simulations[0]
# print("Keys in one simulation:", sim0.keys())
# print("Matrix shape:", len(sim0["matrix"]), "x", len(sim0["matrix"][0]))  # 7 x 7
# print("Length of TE:", len(sim0["te"]))
# print("Length of frequency list:", len(sim0["frequency"]))
# print("Length of s-parameters:", len(sim0["s_parameters"]["SZMax1ZMax1"]))


import json

def extract_s_parameters(json_path, s_params_to_extract):
    with open(json_path, 'r') as f:
        data = json.load(f)

    simulations = data['simulations']
    
    all_results = []

    for sim in simulations:
        freq = sim['frequency']
        s_params = sim['s_parameters']
        sim_result = {
            'matrix_id': sim['matrix_id'],
            'frequency': freq
        }

        for param in s_params_to_extract:
            if param in s_params:
                sim_result[param] = [
                    complex(entry["real"], entry["imag"]) for entry in s_params[param]
                ]
            else:
                sim_result[param] = None  # Mark as missing
        all_results.append(sim_result)
    
    return all_results

# === Usage Example ===
json_file_path = r"C:\Users\GOPAL\Downloads\cst_batch_results_20250613_153723_converted.json"
# List of S-parameters to extract
s_params = ["SZMax1ZMax1", "SZMin1ZMin1", "SZMax1ZMin1", "SZMin1ZMax1"]

results = extract_s_parameters(json_file_path, s_params)

# Print sample output for first simulation
for param in s_params:
    print(f"\n=== Matrix ID: {results[0]['matrix_id']} ===")
    print(f"S-Parameter: {param}")
    if results[0][param] is not None:
        for f, cval in zip(results[0]['frequency'], results[0][param]):
            print(f"Freq: {f} GHz \t S: {cval.real:.4f} + {cval.imag:.4f}j")
    else:
        print("Not present in the simulation.")
